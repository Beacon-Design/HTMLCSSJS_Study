/*----------------------------------------------------------

Copyright 2017 Ashung Hung

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------------------------*/

@import "../Libraries/Google_Analytics.cocoascript";

var new_slice_for_normal = function(context) {
    addSlice(context, normal);
    ga(context, "UA-99098773-3", "Slice", context.command.identifier(), "layer_base_slice", "normal");
};

var new_slice_for_ios_1x = function(context) {
    addSlice(context, ios1x);
    ga(context, "UA-99098773-3", "Slice", context.command.identifier(), "layer_base_slice", "ios_1x");
};

var new_slice_for_android_1x = function(context) {
    addSlice(context, android1x);
    ga(context, "UA-99098773-3", "Slice", context.command.identifier(), "layer_base_slice", "android_1x");
};

var new_slice_for_web = function(context) {
    addSlice(context, web);
    ga(context, "UA-99098773-3", "Slice", context.command.identifier(), "layer_base_slice", "web");
};

var new_slice_for_svg = function(context) {
    addSlice(context, svg);
    ga(context, "UA-99098773-3", "Slice", context.command.identifier(), "layer_base_slice", "svg");
};

function addSlice(context, preset) {

    var doc = context.document;
    var selection = context.selection;
    var page = doc.currentPage();

    if (selection.count() == 0) {
        doc.showMessage("Plese select at least 1 layer.");
        return;
    }

    // Fix Sketch 45
    if (page.deselectAllLayers) {
        page.deselectAllLayers();
    } else {
        page.changeSelectionBySelectingLayers(nil);
    }

    var selectedLayers = [];

    for (var i = 0; i < selection.count(); i++) {

        var layer = selection.objectAtIndex(i);

        if (layer.class() == "MSSliceLayer") {
            var slice = layer;
        } else {
            var slice = MSSliceLayer.sliceLayerFromLayer(layer);

            var msRect = MSRect.rectWithUnionOfRects([
                MSRect.alloc().initWithRect(slice.absoluteRect().rect()),
                MSRect.alloc().initWithRect(layer.absoluteRect().rect())
            ]);

            slice.absoluteRect().setRect(msRect.rect());

            if (
                layer.class() == "MSLayerGroup" ||
                layer.class() == "MSArtboardGroup" ||
                layer.class() == "MSSymbolMaster"
            ) {
                slice.moveToLayer_beforeLayer(layer, layer.firstLayer());
                // Export Group Contents Only
                if (layer.class() == "MSLayerGroup") {
                    slice.exportOptions().setLayerOptions(2);
                }
            }
        }

        // Export options
        slice.exportOptions().removeAllExportFormats();
        for (var j = 0; j < preset.length; j++) {
            var size = slice.exportOptions().addExportFormat();
            var format = preset[j];
            size.setFileFormat(format.format);
            size.setScale(format.scale);
            if (preset[j].suffix) {
                size.setName(format.suffix);
            }
            if (preset[j].prefix) {
                size.setNamingScheme(1);
                size.setName(format.prefix);
            }
        }

        selectedLayers.push(slice);

    }

    doc.setSelectedLayers(MSLayerArray.arrayWithLayers(selectedLayers));

}

var normal = [
    {
        scale: 1,
        format: "png",
        suffix: ""
    }
];

var web = [
    {
        scale: 1,
        format: "png",
        suffix: ""
    },
    {
        scale: 2,
        format: "png",
        suffix: "_2x"
    }
];

var svg = [
    {
        scale: 1,
        format: "svg",
        suffix: ""
    }
];

var ios1x = [
    {
        scale: 1,
        format: "png",
        suffix: ""
    },
    {
        scale: 2,
        format: "png",
        suffix: "@2x"
    },
    {
        scale: 3,
        format: "png",
        suffix: "@3x"
    }
];

var android1x = [
    {
        scale: 1,
        format: "png",
        prefix: "res/drawable-mdpi/"
    },
    {
        scale: 1.5,
        format: "png",
        prefix: "res/drawable-hdpi/"
    },
    {
        scale: 2,
        format: "png",
        prefix: "res/drawable-xhdpi/"
    },
    {
        scale: 3,
        format: "png",
        prefix: "res/drawable-xxhdpi/"
    },
    {
        scale: 4,
        format: "png",
        prefix: "res/drawable-xxxhdpi/"
    }
];
