/*----------------------------------------------------------

Copyright 2017 Ashung Hung

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------------------------*/

@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var document = context.document;
    var selection = context.selection;

    if (selection.count() > 0) {

        var loopSelection = selection.objectEnumerator();
        while(layer = loopSelection.nextObject()) {

            var fills = layer.style().fills();
            var borders = layer.style().borders();

            if (fills.count() > 0 || borders.count() > 0) {

                var newFills = NSMutableArray.alloc().init();
                var newBorders = NSMutableArray.alloc().init();

                var borderWidth = borders.count() > 0 ? borders.lastObject().thickness() : 1;
                var borderPosition = borders.count() > 0 ? borders.lastObject().position() : 0;

                // Get borders from fills
                var loopFills = fills.objectEnumerator();
                while (fill = loopFills.nextObject()) {
                    if (fill.fillType() == 0 || fill.fillType() == 1) {
                        var styleBorder = MSStyleBorder.alloc().init();
                        if (fill.fillType() == 0) {
                            styleBorder.setFillType(0);
                            styleBorder.setColor(fill.color());
                        }
                        if (fill.fillType() == 1) {
                            styleBorder.setFillType(1);
                            styleBorder.setGradient(fill.gradient());
                        }
                        styleBorder.setThickness(borderWidth);
                        styleBorder.setPosition(borderPosition);
                        styleBorder.setContextSettings(fill.contextSettings());
                        styleBorder.setIsEnabled(fill.isEnabled());
                        newBorders.addObject(styleBorder);
                    } else {
                        newFills.addObject(fill);
                    }
                }

                // Get fills from borders
                var loopBorders = borders.objectEnumerator();
                while (border = loopBorders.nextObject()) {
                    var styleFill = MSStyleFill.alloc().init();
                    styleFill.setFillType(border.fillType());
                    if (border.fillType() == 0) {
                        styleFill.setColor(border.color());
                    }
                    if (border.fillType() == 1) {
                        styleFill.setGradient(border.gradient());
                    }
                    styleFill.setContextSettings(border.contextSettings());
                    styleFill.setIsEnabled(border.isEnabled());
                    newFills.addObject(styleFill);
                }

                // Swap fill and border
                layer.style().removeAllStyleFills();
                layer.style().removeAllStyleBorders();
                layer.style().addStyleBorders(newBorders);
                layer.style().addStyleFills(newFills);

                document.reloadInspector();

            }
        }

    } else {
        doc.showMessage("Please select one layer with fill or border.");
    }

    ga(context, "UA-99098773-3", "Style", context.command.identifier());

}
