/*----------------------------------------------------------

Copyright 2017 Ashung Hung

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------------------------*/

@import "../Libraries/Preferences.cocoascript";
@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var doc = context.document;
    var selection = context.selection;

    if (selection.count() > 0 && selection.firstObject().class() == "MSShapeGroup") {

        var layer = selection.firstObject();

        // \d+x\d+
        var userInputString = doc.askForUserInput_initialValue(
            "Input 2x2, 2x1 or 1x2.",
            getPreferences(context, "divide") || "2x1"
        );

        if (userInputString) {

            setPreferences(context, "divide", userInputString.toString());

            if (/^\d+x\d+$/.test(userInputString) && eval(userInputString.replace("x", "*")) > 1) {

                var hCount = parseInt(/(\d+)/.exec(userInputString)[1]);
                var vCount = parseInt(/x(\d+)/.exec(userInputString)[1]);

                var originX = Math.floor(layer.frame().x()),
                    originY = Math.floor(layer.frame().y()),
                    width = layer.frame().width(),
                    height = layer.frame().height();

                var cellWidth = Math.floor(width / hCount),
                    cellHeight = Math.floor(height / vCount);

                for (var j = 0, y = originY; j < vCount; j++, y += cellHeight) {
                    for (var i = 0, x = originX; i < hCount; i++, x += cellWidth) {
                        // log(i+","+j+" --> (x:" + x + ",y:" + y + ",w:" + cellWidth + ",h:" + cellHeight + ")");
                        var cellLayer = layer.duplicate();
                        cellLayer.frame().setX(x);
                        cellLayer.frame().setY(y);
                        cellLayer.frame().setConstrainProportions(false);
                        cellLayer.frame().setWidth(cellWidth);
                        cellLayer.frame().setHeight(cellHeight);

                        // Fix Sketch 45
                        if (MSApplicationMetadata.metadata().appVersion < 45) {
                            cellLayer.select_byExpandingSelection(true, true);
                        } else {
                            cellLayer.select_byExtendingSelection(true, true);
                        }
                    }
                }

                layer.removeFromParent();

            } else {
                doc.showMessage("Bad format.");
            }

            ga(context, "UA-99098773-3", "Layer", context.command.identifier(), "layer_divide", userInputString.toString());
        }

    } else {
        doc.showMessage("Please select one shape layer.");
    }

};
