/*----------------------------------------------------------

Copyright 2017 Ashung Hung

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------------------------*/

@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var appVersion = MSApplicationMetadata.metadata().appVersion;
    var document = context.document;
    var documentData = document.documentData();
    var selection = context.selection;
    var page = document.currentPage();

    var pasteboard = NSPasteboard.generalPasteboard();
    if (pasteboard.pasteboardItems().count() > 0) {

        // Check Pasteboard type
        var pasteboardType = pasteboard.pasteboardItems().firstObject().types().firstObject();
        var supportedPasteboardTypes = [
            "public.jpeg",
            "public.gif",
            "public.png",
            "public.tiff", // Photoshop
            "com.adobe.pdf",
            "com.adobe.illustrator.aicb", // Illustrator
            "com.bohemiancoding.sketch.v3", // Sketch
            "com.seriflabs.persona.nodes" // Affinity Designer
        ];

        if (supportedPasteboardTypes.indexOf(String(pasteboardType))) {

            if (selection.count() > 0) {

                // Layer will be selected.
                var newLayers = NSMutableArray.alloc().init();

                var loopSelection = selection.objectEnumerator();
                while (oldLayer = loopSelection.nextObject()) {

                    var pasteboardLayers = getPasteboardLayers();

                    pasteboardLayers.insertInGroup_atPosition_afterLayer(
                        oldLayer.parentGroup(),
                        oldLayer.frame().rect().origin,
                        oldLayer
                    );

                    var group = MSLayerGroup.groupFromLayers(pasteboardLayers.layers());
                    group.moveToLayer_beforeLayer(oldLayer.parentGroup(), oldLayer);
                    group.frame().setX(oldLayer.frame().x());
                    group.frame().setY(oldLayer.frame().y());
                    group.ungroup();

                    // Replace symbol master
                    if (oldLayer.class() == "MSSymbolMaster") {
                        var newSymbolMaster = pasteboardLayers.layers().firstLayer();
                        var oldSymbolMaster = oldLayer;
                        // Replace with another symbol master
                        if (
                            pasteboardLayers.layers().layers().count() == 1 &&
                            pasteboardLayers.layers().firstLayer().class() == "MSSymbolMaster"
                        ) {
                            changeAllInstancesToSymbol(context, oldSymbolMaster, newSymbolMaster);
                        }
                        // Change symbol's instances into group
                        else {
                            changeAllInstancesToGroup(context, oldSymbolMaster);
                        }
                    }

                    oldLayer.removeFromParent();

                    newLayers.addObjectsFromArray(pasteboardLayers.layers().layers());

                }

                if (appVersion >= 45) {
                    page.changeSelectionBySelectingLayers(newLayers);
                } else {
                    var loopNewLayers = newLayers.objectEnumerator();
                    while (layer = loopNewLayers.nextObject()) {
                        layer.select_byExpandingSelection(true, true);
                    }
                }

            } else {
                document.showMessage("Please select at least 1 layer.");
            }


        } else {
            document.showMessage("Please copy a Sketch layer first.");
        }

    } else {
        document.showMessage("Clipboard is empty.");
    }

    ga(context, "UA-99098773-3", "Layer", context.command.identifier());

}

function getPasteboardLayers() {
    var pasteboard = NSPasteboard.generalPasteboard();
    var pasteboardManager = NSApp.delegate().pasteboardManager();
    var pasteboardLayers = pasteboardManager.readPasteboardLayersFromPasteboard_options(pasteboard, nil);
    return pasteboardLayers;
}

function changeAllInstancesToSymbol(context, oldSymbolMaster, newSymbolMaster) {
    var loopPages = context.document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var instances = page.allSymbolInstancesInChildren().allObjects();
        var loopInstances = instances.objectEnumerator();
        var instance;
        while (instance = loopInstances.nextObject()) {
            if (instance.symbolMaster()) {
                if (instance.symbolMaster() == oldSymbolMaster) {
                    instance.changeInstanceToSymbol(newSymbolMaster);
                }
            }
        }
    }
}

function changeAllInstancesToGroup(context, symbolMaster) {
    var loopPages = context.document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var instances = page.allSymbolInstancesInChildren().allObjects();
        var loopInstances = instances.objectEnumerator();
        var instance;
        while (instance = loopInstances.nextObject()) {
            if (instance.symbolMaster()) {
                if (instance.symbolMaster() == symbolMaster) {
                    instance.detachByReplacingWithGroup();
                }
            }
        }
    }
}
