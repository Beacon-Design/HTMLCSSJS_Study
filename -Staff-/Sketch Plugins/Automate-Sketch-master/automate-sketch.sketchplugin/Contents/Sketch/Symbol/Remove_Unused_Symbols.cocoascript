/*----------------------------------------------------------

Copyright 2017 Ashung Hung

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

----------------------------------------------------------*/

@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var sketch = context.api();
    var doc = context.document;

    // Dialog
    var dialog = NSAlert.alloc().init();
    dialog.setMessageText("Remove Unused Symbols");
    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");
    var checkbox = NSButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 40));
    checkbox.setButtonType(NSSwitchButton);
    checkbox.setTitle(" Keep symbols with nested symbols which it is\n used.");
    checkbox.setState(NSOffState);
    dialog.setAccessoryView(checkbox);
    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        var keepSymbols = checkbox.state();

        // Get all symbols used in overrides
        var idsOfSymbolInOverrides = [];
        var idsOfAllInstances = [];
        var pages = doc.pages();
        var loopPages = pages.objectEnumerator();
        var page;
        while (page = loopPages.nextObject()) {
            var children = page.children();
            var loopChildren = children.objectEnumerator();
            var layer;
            while (layer = loopChildren.nextObject()) {
                if (layer.class() == "MSSymbolInstance") {
                    idsOfAllInstances.push(String(layer.symbolID()));
                    if (layer.overrides()) {

                        var overrides = layer.overrides().allValues()

                        if (sketch.version < 44) {
                            overrides = layer.overrides().objectForKey(0).allValues();
                        }

                        for (var i = 0; i < overrides.count(); i++) {
                            pushOverrideSymbolIDtoArray(overrides.objectAtIndex(i), idsOfSymbolInOverrides);
                        }

                    }
                }
            }
        }

        var countGlobal = 0;
        removeUnusedSymbols();

        doc.showMessage("Remove " + countGlobal + " unused SymbolMaster.");

        ga(context, "UA-99098773-3", "Symbol", context.command.identifier());

        function removeUnusedSymbols() {
            var count = 0;
            var allSymbolMasters = context.document.documentData().allSymbols();
            var loopSymbols = allSymbolMasters.objectEnumerator();
            var symbolMaster;
            while (symbolMaster = loopSymbols.nextObject()) {

                if (
                    !symbolMaster.hasInstances() &&
                    idsOfSymbolInOverrides.indexOf(String(symbolMaster.symbolID())) == -1
                ) {
                    if (keepSymbols == 1) {
                        var hasUsedInstances = 0;
                        var loopLayers = symbolMaster.children().objectEnumerator();
                        var layer;
                        while (layer = loopLayers.nextObject()) {
                            if (
                                layer.class() == "MSSymbolInstance" &&
                                idsOfAllInstances.indexOf(String(layer.symbolID())) != -1
                            ) {
                                hasUsedInstances ++;
                            }
                        }
                        if (hasUsedInstances == 0) {
                            symbolMaster.removeFromParent();
                            count ++;
                            countGlobal ++;
                        }
                    } else {
                        symbolMaster.removeFromParent();
                        count ++;
                        countGlobal ++;
                    }
                }
            }
            if (count != 0) {
                removeUnusedSymbols();
            }
        }

        function pushOverrideSymbolIDtoArray(overrideObject, array) {
            if (overrideObject.isKindOfClass(NSDictionary.class())) {
                if (overrideObject.objectForKey("symbolID")) {
                    array.push(String(overrideObject.objectForKey("symbolID")));
                }
                for (var i = 0; i < overrideObject.allValues().count(); i ++) {
                    pushOverrideSymbolIDtoArray(overrideObject.allValues().objectAtIndex(i), array);
                }
            }
        }

    }

}
